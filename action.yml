name: Actions Ecosystem Action Get Latest Tag
description: Get a latest Git tag.
author: Actions Ecosystem
inputs:
  semver_only:
    description: Whether gets only a tag in the shape of semver. `v` prefix is accepted for tag names.
    required: false
    default: "false"
  initial_version:
    description: The initial version. Works only when `inputs.with_initial_version` == `true`.
    required: false
    default: "v0.0.0"
  with_initial_version:
    description: Whether returns `inputs.initial_version` as `outputs.tag` if no tag exists. `true` and `false` are available.
    required: false
    default: "true"
outputs:
  tag:
    description: The latest tag. If no tag exists and `inputs.with_initial_version` == `false`, this value is `''`.
    value: ${{ steps.get-latest-tag.outputs.tag }}
branding:
  icon: bookmark
  color: green
runs:
  using: composite
  steps:
    - name: Run Get Latest Tag Bash
      id: get-latest-tag
      shell: bash
      run: |
        set -e

        git config --global --add safe.directory /github/workspace

        git fetch --tags
        # This suppress an error occurred when the repository is a complete one.
        git fetch --prune --unshallow || true
        latest_tag=''

        if [ "${{inputs.semver_only}}" = 'false' ]; then
          # Get a actual latest tag.
          # If no tags found, supress an error. In such case stderr will be not stored in latest_tag variable so no additional logic is needed.
          latest_tag=$(git describe --abbrev=0 --tags || true)
        else
          # Get a latest tag in the shape of semver.
          for ref in $(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags); do
            tag="${ref#refs/tags/}"
            if echo "${tag}" | grep -E '^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?' 2>/dev/null; then
              latest_tag="${tag}"
              break
            fi
          done
        fi

        if [ "${latest_tag}" = '' ] && [ "${{inputs.with_initial_version}}" = 'true' ]; then
          latest_tag="${{inputs.initial_version}}"
        fi
        echo $latest_tag
        echo "tag=${latest_tag}" >> $GITHUB_OUTPUT
        
